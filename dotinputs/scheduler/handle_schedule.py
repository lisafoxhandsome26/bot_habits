import logging
import requests
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.jobstores.base import JobLookupError
from loader import bot
from ..buttons import get_habits_page
from telebot import types
from .core import scheduler
from config.environments import env
from ..database import dao


logging.basicConfig(level=logging.INFO)


def scheduled_message(chat_id, habit):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏"""
    mark = types.InlineKeyboardMarkup()
    complited = types.InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"–í—ã–ø–æ–ª–Ω–∏—Ç—å:{habit}")
    passed = types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å:{habit}")
    mark.row(complited, passed)
    bot.send_message(chat_id, f'üëá üëá –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É üëá üëá\n\nüìå "{habit}"', reply_markup=mark)


def set_cron(chat_id: int, habit: str, new_time: int) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    id_triger = str(chat_id) + habit
    scheduler.add_job(scheduled_message, IntervalTrigger(seconds=new_time), args=[chat_id, habit], id=id_triger)


def cancel_trigger(chat_id: int, habit: str) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        id_trigger = str(chat_id) + habit
        scheduler.remove_job(id_trigger)
    except JobLookupError:
        bot.send_message(chat_id, "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


def pause_trigger(chat_id, habits):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    for col in habits:
        id_trigger = str(chat_id) + col["name_habit"]
        scheduler.pause_job(id_trigger)


def resumes_trigger(chat_id, habits):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    for col in habits:
        id_trigger = str(chat_id) + col["name_habit"]
        scheduler.resume_job(id_trigger)


@bot.callback_query_handler(
    func=lambda call:
    call.data.startswith("–í—ã–ø–æ–ª–Ω–∏—Ç—å") or
    call.data.startswith("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
)
def record_execution(call):
    chat_id: int = call.message.chat.id
    message_id: int = call.message.message_id
    trigger, name_habit = call.data.split(":")
    mark = get_habits_page()
    hashed = dao.get_hashed_data(chat_id)
    if trigger == "–í—ã–ø–æ–ª–Ω–∏—Ç—å":
        result = requests.patch(
            url=f"{env.MAIN_HOST}habit/status/",
            json={"name_habit": name_habit, "completed": True},
            headers={'Authorization': f'Bearer {hashed.jwt_token}'}
        )
        if result.status_code == 202:
            data: dict = result.json()
            if data["status"] == "–í—ã–ø–æ–ª–Ω–µ–Ω–æ":
                cancel_trigger(chat_id, name_habit)
                sms = f"‚ù§Ô∏è –ü—Ä–∏–º–∏—Ç–µ –º–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π {name_habit}"
                bot.send_message(chat_id, sms, reply_markup=mark)
            else:
                sms = f'üòä –í–∞—à–∞ –ø—Ä–∏–≤—ã—á–∫–∞ "{name_habit}" –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ë–î.'
                bot.send_message(chat_id, sms, reply_markup=mark)
        else:
            sms = "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"
            bot.send_message(chat_id, sms, reply_markup=mark)
    else:
        requests.patch(
            url=f"{env.MAIN_HOST}habit/status/",
            json={"name_habit": name_habit, "completed": False},
            headers={'Authorization': f'Bearer {hashed.jwt_token}'}
        )
        sms = f'üòå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ "{name_habit}" –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑'
        bot.send_message(chat_id, sms, reply_markup=mark)
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
