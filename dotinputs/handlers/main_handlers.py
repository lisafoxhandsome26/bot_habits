import json

import requests
from telebot import types
from loader import bot
from dotinputs.buttons import get_habits_page, get_authorization_buttons
from dotinputs.states import STATES, user_state
from config.environments import env
from .handle_registration import handle_question
from .utils import get_data_user, check_authorization
from ..scheduler.handle_schedule import pause_trigger, resumes_trigger
from ..database.dao import get_hashed_data, authenticated


@bot.message_handler(commands=["start"])
def start(message):
    id_chat: int = message.chat.id
    user_name: str = message.from_user.first_name
    token: str | bool = check_authorization(id_chat)
    if token != "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è" and token is not False:
        sms, mark = get_data_user(token)
        bot.send_message(id_chat, sms, reply_markup=mark)
    elif token == "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è":
        sms, mark = get_authorization_buttons()
        bot.send_message(id_chat, sms, reply_markup=mark)
    else:
        user_state[message.chat.id] = STATES['introduction']
        sms = (f"–ü—Ä–∏–≤–µ—Ç {user_name}! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üë±‚Äç‚ôÇÔ∏è.\n"
               f"–Ø –±–æ—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫, \n"
               f"—è –±—É–¥—É —Ç–≤–æ–∏–º –ø–æ–º–æ—à–Ω–∏–∫–æ–º –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.\n"
               f"–ï—Å–ª–∏ —Ç—ã —Å–æ–≥–ª–∞—Å–µ–Ω –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ '–î–∞'.")
        mark = types.ReplyKeyboardRemove()
        bot.send_message(id_chat, sms, reply_markup=mark)
        bot.register_next_step_handler(message, on_click)


def on_click(message):
    id_chat: int = message.chat.id
    user_sms: str = message.text
    sms = ("–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —á—Ç–æ —Ç—ã —Å–æ–≥–ª–∞—Å–µ–Ω –º–µ–Ω—è—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å üë±‚Äç‚ôÇÔ∏è.\n"
           "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ –∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n"
           "–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
           "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –Ω–∞–∂–º–∏ —Å–ª–æ–≤–æ '–î–∞' ‚úã.")
    if user_sms.lower().strip() == "–¥–∞":
        bot.send_message(id_chat, sms)
        bot.register_next_step_handler(message, end_check)
    else:
        sms = ("–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å —á—Ç–æ —Ç—ã –Ω–µ –≥–æ—Ç–æ–≤ –º–µ–Ω—è—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å.\n"
               "–ï—Å–ª–∏ –Ω–∞–¥—É–º–∞–µ—à—å –¥–∞–π –º–Ω–µ –∑–Ω–∞—Ç—å —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º üôÅ.")
        bot.send_message(id_chat, sms)
        bot.register_next_step_handler(message, start)


def end_check(message):
    id_chat: int = message.chat.id
    user_sms: str = message.text

    if user_sms.lower().strip() == "–¥–∞":
        user_state[message.chat.id] = STATES['fullname']
        bot.send_message(id_chat, f"–ö–∞–∫–æ–µ —Ç–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è?")
        handle_question(message)
    else:
        sms = "üë±‚Äç –ï—Å–ª–∏ –≤—ã –Ω–∞–¥—É–º–∞–µ—Ç–µ –¥–∞–π—Ç–µ –º–Ω–µ –∑–Ω–∞—Ç—å, —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º! /start"
        bot.send_message(id_chat, sms)
        bot.register_next_step_handler(message, start)


@bot.message_handler(
    func=lambda message:
    message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" or
    message.text == "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ –æ —Å–µ–±–µ"
)
def comeback_or_info(message):
    chat_id: int = message.chat.id
    token = check_authorization(chat_id)
    if token != "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è" and token is not False:
        sms, mark = get_data_user(token)
        bot.send_message(chat_id, sms, reply_markup=mark)
    elif token == "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è":
        sms, mark = get_authorization_buttons()
        bot.send_message(chat_id, sms, reply_markup=mark)
    else:
        sms, mark = "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", types.ReplyKeyboardRemove()
        bot.send_message(chat_id, sms, reply_markup=mark)


@bot.message_handler(func=lambda message: message.text == "–í–∫–ª–∞–¥–∫–∞ —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏")
def page_habits(message):
    chat_id: int = message.chat.id
    token: str = check_authorization(chat_id)
    if token != "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è" and token is not False:
        sms, mark = "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏", get_habits_page()
        bot.send_message(chat_id, sms, reply_markup=mark)
    elif token == "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è":
        sms, mark = get_authorization_buttons()
        bot.send_message(chat_id, sms, reply_markup=mark)
    else:
        sms, mark = "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", types.ReplyKeyboardRemove()
        bot.send_message(chat_id, sms, reply_markup=mark)


@bot.message_handler(func=lambda message: message.text == "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
def authorization_user(message):
    chat_id: int = message.chat.id
    hashed = get_hashed_data(chat_id)
    if hashed:
        result = requests.patch(
            url=f"{env.MAIN_HOST}login/",
            json={"chat_id": chat_id, "hash_pass": hashed.password, "user_id": hashed.user_id}
        )
        new_token = result.json()["token"]
        authenticated(chat_id, new_token)
        result = requests.get(
            url=f"{env.MAIN_HOST}list_habit/",
            headers={'Authorization': f'Bearer {new_token}'})
        if result.status_code == 200:
            habits = result.json()["habits"]
            resumes_trigger(chat_id, habits)
        sms, mark = get_data_user(new_token)
        bot.send_message(chat_id, sms, reply_markup=mark)
    else:
        sms, mark = "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", types.ReplyKeyboardRemove()
        bot.send_message(chat_id, sms, reply_markup=mark)


@bot.message_handler(func=lambda message: message.text == "–í—ã–π—Ç–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
def exit_profile(message):
    chat_id: int = message.chat.id

    hashed = get_hashed_data(chat_id)
    if hashed:
        result = requests.get(
            url=f"{env.MAIN_HOST}list_habit/",
            headers={'Authorization': f'Bearer {hashed.jwt_token}'}
        )
        if result.status_code == 200:
            habits = json.loads(result.text)["habits"]
            pause_trigger(chat_id, habits)
        result = requests.patch(
            url=f"{env.MAIN_HOST}logaut/",
            json={"chat": chat_id}
        )
        bad_token = result.json()["token"]
        authenticated(chat_id, bad_token)
        sms = "–í—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã –∑–∞–Ω–æ–≥–æ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å /start",
        mark = types.ReplyKeyboardRemove()
        bot.send_message(chat_id, sms, reply_markup=mark)
