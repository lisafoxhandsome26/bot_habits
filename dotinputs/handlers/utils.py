import json
from datetime import datetime
import requests
from dotinputs import buttons as bn
from config.environments import env


def check_authorization(chat_id: int):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = requests.get(f"{env.MAIN_HOST}profile_user/{chat_id}/")
    if result.status_code == 200:
        user: dict = json.loads(result.text)["user"]
        if user['authorization']:
            return user
        return "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
    return False


def get_profile(chat_id: int):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user: dict = check_authorization(chat_id)
    if user:
        sms, mark = get_data_user(user)
        return sms, mark
    else:
        sms, mark = bn.get_authorization_buttons()
        return sms, mark


def get_data_user(user: dict):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        sms = (f"üëáüëá –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üëáüëá\n\n"
               f"üìå –í–∞—à–µ –∏–º—è: {user['fullname']}\n"
               f"üìå –í–∞—à —Ç–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
               f"üìå –ú–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞: {user['location']}\n"
               f"üìå –í–∞—à–∞ —Ü–µ–ª—å: {user['purpose']}\n"
               f"üìå –ü–æ—á–µ–º—É –≤—ã –∑–¥–µ—Å—å: {user['why']}\n"
               f"üìå –í–∞—à–µ —Ö–æ–±–±–∏: {user['hobby']}")
        mark = bn.get_profile_buttons()
        return sms, mark
    except TypeError:
        sms, mark = bn.get_authorization_buttons()
        return sms, mark


def get_sms_habits(habits: list[dict]):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö"""
    sms: str = "üëáüëá –í–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ üëáüëá\n\n"
    mark = bn.get_habits_page()
    for col in habits:
        count = col.get("tracking").get("completed")
        deferred = col.get("tracking").get("deferred")
        last_update = col.get("tracking").get("last_update")

        if count:
            motivation = f"–í—ã –º–æ–ª–æ–¥—Ü—ã üëçüëçüëç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π {count}."
        else:
            motivation = "üî• –≠—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å."
        if deferred:
            deferr = f"–û–±—Ä–∞—Ç–∏—Ç–µ –Ω–∞ —ç—Ç–æ –≤–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ - {deferred}"
        else:
            deferr = f"üî• –í—ã –º–æ–ª–æ–¥—Ü–∏ —ç—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª–∞—Å—å."

        day = round(col['period'] / 86400, 1)

        sms += (f"üìå {col['name_habit']}\n"
                f"–ü–µ—Ä–∏–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {day} –¥–Ω—è.\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ {col['count_period']}\n"
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è {col['created_at'][:16]}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {last_update}\n"
                f"{deferr}\n"
                f"{motivation}\n\n")
    return sms, mark


def get_sms_for(habits: list[dict]):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    data_habits: dict = {}
    sms: str = "üëáüëá –í–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ üëáüëá\n\n"
    for i, habit in enumerate(habits):
        sms += f'üìå {i+1} - {habit["name_habit"]}\n'
        data_habits[i+1] = habit
    return sms, data_habits


def validator_period(datetime_user: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∏–º–æ–π –¥–∞—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º—Å"""
    datetime_user_obj = datetime.strptime(datetime_user, "%Y-%m-%d %H:%M:%S").timestamp()
    datetime_now_obj = datetime.now().timestamp()
    user_time, now_time = int(datetime_user_obj), int(datetime_now_obj)
    result_period = user_time - now_time
    if result_period < 86400:
        raise ValueError
    return result_period


def validator_params(param, chat_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    period = param.get("period")
    count_period = param.get("count_period")
    name_habit = param.get("name_habit")
    if period:
        return validator_period(period)
    elif count_period:
        new_count = int(count_period)
        if new_count < 21:
            raise ValueError
        return new_count
    else:
        result = requests.get(f"{env.MAIN_HOST}/habit/{name_habit}/{chat_id}/")
        if result.status_code == 200:
            return name_habit
        else:
            raise ValueError
